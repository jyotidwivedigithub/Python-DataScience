Consider the below code to answer further questions:
    import numpy as np
    list_ = [ ‘1’ , ’2’ , ‘3’ , ‘4’ , ‘5’ ]
    array_list = np.array(object = list_)

Q1. Is there any difference in the data type of variables list_ and array_list? If there is then write a code
    to print the data types of both the variables.
Ans. Yes, there is a difference in the data type of variables list_ and array_list. The list_ variable is a Python list data type, 
     while array_list variable is a numpy array data type.
    Example:-
            import numpy as np
            list_ = [ ‘1’ , ’2’ , ‘3’ , ‘4’ , ‘5’ ]
            array_list = np.array(object = list_)
             
            print(type(list_))        # output- <class 'list'>
            print(type(array_list))   # output- <class 'numpy.ndarray'>    
            
            
Q2. Write a code to print the data type of each and every element of both the variables list_ and
   array_list.
Ans.    import numpy as np
        list_ = ['1','2','3','4','5']
        array_list = np.array(object=list_)

    data type of each and every elements of list_ ...
        list_ = ['1','2','3','4','5']
        for i in list_:
            print(type(i))
      
    data type of each and every elements of array_list ...
        import numpy as np
        list_ = ['1','2','3','4','5']
        array_list = np.array(object=list_)
        
        print(array_list.dtype)
    
    
Q3. Considering the following changes in the variable, array_list:
    array_list = np.array(object = list_, dtype = int)
    Will there be any difference in the data type of the elements present in both the variables, list_ and
    array_list? If so then print the data types of each and every element present in both the variables, list_
    and arra_list.
    Consider the below code to answer further questions:
    import numpy as np
    num_list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
    num_array = np.array(object = num_list)
Ans. 
    Yes, there will be a difference in the data type of the elements present in the list_ and array_list variables 
    after changing the dtype parameter to int. In this case, the elements of array_list will be integers, whereas the elements of list_ are strings.
      
            import numpy as np

            list_ = ['1', '2', '3', '4', '5']
            array_list = np.array(object=list_, dtype=int)
            # Print data types of elements in list_
            for element in list_:
                print(type(element))
            # Print data types of elements in array_list
            for element in array_list:
                print(type(element))
    
    Regarding the second part of your question, the num_list variable is a list of lists containing integers, and the num_array variable is a two-dimensional 
    numpy array of integers. The data type of the elements in both num_list and num_array will be int.
             
            import numpy as np

            num_list = [[1, 2, 3], [4, 5, 6]]
            num_array = np.array(object=num_list)
            # Print data types of elements in num_array
            for row in num_array:
                for element in row:
                    print(type(element))
        
        
Q4. Write a code to find the following characteristics of variable, num_array:
    (i) shape
    (ii) size
Ans.     
            import numpy as np
            num_list = [[1, 2, 3], [4, 5, 6]]
            num_array = np.array(object=num_list)
      
  (i)shape- print(num_array.shape)
  (ii)size- print(num_array.size)
        
        
Q5. Write a code to create numpy array of 3*3 matrix containing zeros only, using a numpy array
   creation function.
   [Hint: The size of the array will be 9 and the shape will be (3,3).]
Ans.  
        import numpy as np
        ar = np.zeros((3,3))
        print(ar)
    
Q6. Create an identity matrix of shape (5,5) using numpy functions?
   [Hint: An identity matrix is a matrix containing 1 diagonally and other elements will be 0.]
Ans.
    import numpy as np
    identity_matrix = np.identity(n=5)
    print(identity_matrix)
